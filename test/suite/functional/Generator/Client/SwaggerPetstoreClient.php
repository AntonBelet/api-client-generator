<?php declare(strict_types=1);

/*
 * This file was generated by docler-labs/api-client-generator.
 *
 * Do not edit it manually.
 */

namespace Test;

use Psr\Container\ContainerInterface;
use Psr\Http\Client\ClientInterface;
use Psr\Http\Message\ResponseInterface;
use Test\Request\AddPetRequest;
use Test\Request\CountPetsRequest;
use Test\Request\DeletePetRequest;
use Test\Request\FindPetByIdRequest;
use Test\Request\FindPetsRequest;
use Test\Request\Mapper\RequestMapperInterface;
use Test\Request\RequestInterface;
use Test\Response\Handler\ResponseHandlerInterface;
use Test\Response\Mapper\PetCollectionResponseMapper;
use Test\Response\Mapper\PetResponseMapper;
use Test\Schema\Pet;
use Test\Schema\PetCollection;

class SwaggerPetstoreClient
{
    /** @var ClientInterface */
    private $client;

    /** @var RequestMapperInterface */
    private $requestHandler;

    /** @var ResponseHandlerInterface */
    private $responseHandler;

    /** @var ContainerInterface */
    private $container;

    /**
     * @param ClientInterface          $client
     * @param RequestMapperInterface   $requestHandler
     * @param ResponseHandlerInterface $responseHandler
     * @param ContainerInterface       $container
     */
    public function __construct(ClientInterface $client, RequestMapperInterface $requestHandler, ResponseHandlerInterface $responseHandler, ContainerInterface $container)
    {
        $this->client          = $client;
        $this->requestHandler  = $requestHandler;
        $this->responseHandler = $responseHandler;
        $this->container       = $container;
    }

    /**
     * @param RequestInterface $request
     *
     * @return ResponseInterface
     */
    public function getResponse(RequestInterface $request): ResponseInterface
    {
        return $this->responseHandler->handle($this->client->sendRequest($this->requestHandler->map($request)));
    }

    /**
     * @param FindPetsRequest $request
     *
     * @return PetCollection
     */
    public function findPets(FindPetsRequest $request): PetCollection
    {
        return $this->container->get(PetCollectionResponseMapper::class)->map($this->getResponse($request));
    }

    /**
     * @param AddPetRequest $request
     *
     * @return Pet
     */
    public function addPet(AddPetRequest $request): Pet
    {
        return $this->container->get(PetResponseMapper::class)->map($this->getResponse($request));
    }

    /**
     * @param CountPetsRequest $request
     */
    public function countPets(CountPetsRequest $request)
    {
        $this->getResponse($request);
    }

    /**
     * @param FindPetByIdRequest $request
     *
     * @return Pet
     */
    public function findPetById(FindPetByIdRequest $request): Pet
    {
        return $this->container->get(PetResponseMapper::class)->map($this->getResponse($request));
    }

    /**
     * @param DeletePetRequest $request
     */
    public function deletePet(DeletePetRequest $request)
    {
        $this->getResponse($request);
    }
}
