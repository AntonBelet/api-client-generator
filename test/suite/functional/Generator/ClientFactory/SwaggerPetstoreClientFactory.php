<?php declare(strict_types=1);

/*
 * This file was generated by docler-labs/api-client-generator.
 *
 * Do not edit it manually.
 */

namespace Test;

use DoclerLabs\ApiClientGenerator\Generator\RequestMapper;
use DoclerLabs\ApiClientGenerator\Output\StaticPhp\Response\Handler\ResponseHandler;
use DoclerLabs\ApiClientGenerator\Output\StaticPhp\Response\ResponseMapperRegistry;
use DoclerLabs\ApiClientGenerator\Output\StaticPhp\Response\ResponseMapperRegistryInterface;
use InvalidArgumentException;
use Psr\Http\Client\ClientInterface;
use Test\Response\Mapper\FoodResponseMapper;
use Test\Response\Mapper\PetCollectionResponseMapper;
use Test\Response\Mapper\PetResponseMapper;

class SwaggerPetstoreClientFactory
{
    /**
     * @param string $baseUri
     * @param array  $options
     *
     * @return SwaggerPetstoreClient
     */
    public function create(string $baseUri, array $options = []): SwaggerPetstoreClient
    {
        if (\substr($baseUri, -1) !== '/') {
            throw new InvalidArgumentException('Base URI should end with the `/` symbol.');
        }
        $default  = ['base_uri' => $baseUri, 'timeout' => 3, 'http_errors' => false];
        $config   = \array_replace_recursive($default, $options);
        $registry = new ResponseMapperRegistry();
        $this->registerResponseMappers($registry);

        return new SwaggerPetstoreClient(new Client($config), new RequestMapper(), new ResponseHandler(), $registry);
    }

    /**
     * @param ResponseMapperRegistryInterface $registry
     */
    public function registerResponseMappers(ResponseMapperRegistryInterface $registry)
    {
        $registry->add(PetCollectionResponseMapper::class, static function () use ($registry): PetCollectionResponseMapper {
            return new PetCollectionResponseMapper($registry->get(PetResponseMapper::class));
        });
        $registry->add(PetResponseMapper::class, static function () use ($registry): PetResponseMapper {
            return new PetResponseMapper($registry->get(FoodResponseMapper::class));
        });
        $registry->add(FoodResponseMapper::class, static function () use ($registry): FoodResponseMapper {
            return new FoodResponseMapper();
        });
    }
}
